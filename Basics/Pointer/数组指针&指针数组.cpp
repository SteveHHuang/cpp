#include <iostream>
using namespace std;

int main(){
    int a[3][4] = {
        {1,2,3,4},
        {5,6,7,8},
        {9,10,11,12}

    };

    int *ptra [3] = {a[0], a[1], a[2]}; // 指针数组，包含一堆指针的数组
    cout << (*(ptra)) << '\n'; // 指向第[0]个数组的第[0]个元素
    cout << (*(ptra)+1) << '\n'; // 指向第[0]个数组的第[0+1]个元素
    cout << (*(ptra+1)) << '\n'; // 指向第[0+1]个数组的第[0]个元素
    cout << '\n';

    int (*pointer)[4] = &a[0]; // 数组指针，指向一整个数组
    

    cout << pointer << '\n'; // 指向第0个数组的（起始）地址
    cout << (pointer+1) << '\n';// 指向第0+1个数组的起始地址
    cout << (pointer)+1 << '\n'; // 指向第0+1个数组的起始地址 这里加不加括号都一样 因为指向的是一整个数组的地址
    // 这里a[0] 是第 0 行数组的起始地址，也就是指向，且仅指向 a[0][0] 的地址。不是下标
    // &a[0]是这一整个数组的地址，所以这个数组指针不能初始化为a[0]
    // 如果pointer指向的是一个一维数组，那么+1之后的结果不变
    
    cout << '\n';
    cout << *(pointer) << '\n'; // 数组指针退化成指针，指向a[0]的第0个数
    cout << *(pointer+1) << '\n'; // 数组指针退化成指针，指向第0+1个数组的第0个数
    cout << *((pointer)+1) << '\n'; // 数组指针加括号不影响
    cout << *(*(pointer+1)) << '\n'; // 解引用，输出结果就是5


    return 0;
}